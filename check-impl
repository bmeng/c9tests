#!/usr/bin/env oo-ruby
# -*- ruby -*-

require 'rubygems'
require 'openshift-origin-common'
require 'openshift-origin-node'
require 'systemu'
require 'digest/md5'
require 'net/http'
require 'uri'

config = OpenShift::Config.new
domain = config.get("CLOUD_DOMAIN")

cart = "diy-0.1"
hook_dir = File.join(config.get("CARTRIDGE_BASE_PATH"), cart, "info/hooks")

def collect_children
  begin
    while true
      Process.wait2
    end
  rescue Errno::ECHILD
  end
end

apprange = [(1050...1099).to_a, (15901...15950).to_a].flatten
apps = apprange.map { |idx|
  { :name => "foo#{idx}",
    :namespace => "bar#{idx}",
    :uid => idx,
    :uuid => Digest::MD5.hexdigest("foo#{idx}-bar#{idx}").to_s,
    :fqdn => "foo#{idx}-bar#{idx}.#{domain}" }
}

# Start apps first to allow them to settle
apps.each do |app|
  Process.fork do
    puts "Starting: #{app[:uuid]}"
    hook = File.join(hook_dir, 'start')
    cmd = "#{hook} #{app[:name]} #{app[:namespace]} #{app[:uuid]}"
    rc, out, err = systemu cmd
    if rc != 0
      $stderr.puts "ERROR: #{cmd} = #{rc} #{out} #{err}"
    end
  end
end

collect_children

# Check apps
apps_to_check = apps.clone
50.times.each do
  apps_to_check.clone.each do |app|
    puts "Checking: '#{app[:uuid]} -> #{app[:fqdn]}"
    uri = URI.parse("http://#{app[:fqdn]}/")
    Net::HTTP.start(uri.host, uri.port) do |http|
      request = Net::HTTP::Get.new uri.request_uri
      response = http.request request
      app[:response] = response.code.to_i
    end
  end
end

apps_to_check,each do |app|
  if app[:response] >=300
    $stderr.puts "Error: http://#{app[:fqdn]}/ => #{response.code}"
  end
end

# Finally, stop apps
apps.each do |app|
  Process.fork do
    puts "Stopping: #{app[:uuid]}"
    hook = File.join(hook_dir, 'stop')
    cmd = "#{hook} #{app[:name]} #{app[:namespace]} #{app[:uuid]}"
    rc, out, err = systemu cmd
    if rc != 0
      $stderr.puts "ERROR: #{cmd} = #{rc} #{out} #{err}"
    end
  end
end

collect_children
